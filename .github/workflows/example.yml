name: 'Action Test'
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - master
      - develop
  workflow_dispatch:


jobs:
  discovery: # make sure the action works on a clean machine without building
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    outputs:
      hits: ${{ steps.discovery.outputs.hits }}
    steps:
      # Checkout repository
      - uses: actions/checkout@v3

      # Configure Nix
      - uses: nixbuild/nix-quick-install-action@v22
        with:
          nix_conf: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            trusted-users = runner
            access-tokens = github.com=${{ github.token }}

      - run: env

      # Execute Discovery. It will schedule builds on `worker` job below
      - uses: DevPalace/phoenix-ci/discovery@v1
        id: discovery
        with:
          # Attribute paths to search for targets
          attrPaths: ci.x86_64-linux.default, packages.x86_64-linux

          # Disable caching since discovery does not do much most of the time
          nixStoreCachingEnabled: false
          nixEvalCacheCachingEnabled: false
        env:
          GITHUB_TOKEN: ${{ github.token }}

  worker:
    name: "${{ matrix.target.attrPath }}"
    needs: [discovery]
    permissions:
      actions: read
      contents: read
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.discovery.outputs.hits) }}
    steps:
      # Checkout repository
      - uses: actions/checkout@v3

      # Configure Nix
      - uses: nixbuild/nix-quick-install-action@v22
        with:
          nix_conf: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            trusted-users = runner
            access-tokens = github.com=${{ github.token }}

      # Executes builds per each found target in discovery
      - uses: DevPalace/phoenix-ci/worker@v1
        id: worker
        with:
          target: ${{ toJSON(matrix.target) }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

